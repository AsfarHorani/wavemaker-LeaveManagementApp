/*Copyright (c) 2022-2023 venturedive.com All Rights Reserved.
 This software is the confidential and proprietary information of venturedive.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with venturedive.com*/
package com.leave_management_system.hrdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.leave_management_system.hrdb.service.HrdbQueryExecutorService;
import com.leave_management_system.hrdb.models.query.*;

@RestController(value = "Hrdb.QueryExecutionController")
@RequestMapping("/hrdb/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private HrdbQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/cavation_days", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "a")
    public Page<CavationDaysResponse> executeCavation_days(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: cavation_days");
        Page<CavationDaysResponse> _result = queryService.executeCavation_days(pageable);
        LOGGER.debug("got the result for named query: cavation_days, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query cavation_days")
    @RequestMapping(value = "/queries/cavation_days/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCavation_days(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: cavation_days");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "cavation_days";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportCavation_days( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/vacationlist2", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "a")
    public Page<Vacationlist2Response> executeVacationlist2(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: vacationlist2");
        Page<Vacationlist2Response> _result = queryService.executeVacationlist2(pageable);
        LOGGER.debug("got the result for named query: vacationlist2, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query vacationlist2")
    @RequestMapping(value = "/queries/vacationlist2/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVacationlist2(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: vacationlist2");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "vacationlist2";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportVacationlist2( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/total_leaves_yet", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "adasd")
    public Page<TotalLeavesYetResponse> executeTotal_leaves_yet(@RequestParam(value = "id") Integer id, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: total_leaves_yet");
        System.out.println("Excecuting total leaves");
        Page<TotalLeavesYetResponse> _result = queryService.executeTotal_leaves_yet(id, pageable);
        LOGGER.debug("got the result for named query: total_leaves_yet, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query total_leaves_yet")
    @RequestMapping(value = "/queries/total_leaves_yet/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTotal_leaves_yet(@RequestParam(value = "id") Integer id, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: total_leaves_yet");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "total_leaves_yet";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportTotal_leaves_yet(id,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/LeaveAction", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "after leave action")
    public IntegerWrapper executeLeaveAction(@Valid @RequestBody LeaveActionRequest leaveActionRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: LeaveAction");
        Integer _result = queryService.executeLeaveAction(leaveActionRequest);
        LOGGER.debug("got the result for named query: LeaveAction, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/tobeApprovvedLeaves", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Leaves to be approved by manager")
    public Page<TobeApprovvedLeavesResponse> executeTobeApprovvedLeaves(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: tobeApprovvedLeaves");
        Page<TobeApprovvedLeavesResponse> _result = queryService.executeTobeApprovvedLeaves(pageable);
        LOGGER.debug("got the result for named query: tobeApprovvedLeaves, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query tobeApprovvedLeaves")
    @RequestMapping(value = "/queries/tobeApprovvedLeaves/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTobeApprovvedLeaves(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: tobeApprovvedLeaves");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "tobeApprovvedLeaves";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportTobeApprovvedLeaves( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/chartDataByManagerId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "s")
    public Page<ChartDataByManagerIdResponse> executeChartDataByManagerId(@RequestParam(value = "manger_id") Integer mangerId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: chartDataByManagerId");
        Page<ChartDataByManagerIdResponse> _result = queryService.executeChartDataByManagerId(mangerId, pageable);
        LOGGER.debug("got the result for named query: chartDataByManagerId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query chartDataByManagerId")
    @RequestMapping(value = "/queries/chartDataByManagerId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportChartDataByManagerId(@RequestParam(value = "manger_id") Integer mangerId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: chartDataByManagerId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "chartDataByManagerId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportChartDataByManagerId(mangerId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/chartdataall", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "a")
    public ChartdataallResponse executeChartdataall(HttpServletRequest _request) {
        LOGGER.debug("Executing named query: chartdataall");
        ChartdataallResponse _result = queryService.executeChartdataall();
        LOGGER.debug("got the result for named query: chartdataall, result:{}", _result);
        return _result;
    }

}